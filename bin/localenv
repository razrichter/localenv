#!/bin/bash
# -*- mode: sh; -*-
# vim: set filetype=sh :
set -o nounset # no uninitialized
# set -o errexit # exit on error ( use "|| true" or wrap in "set +e" "set -e" to block )
set -o errtrace
set -o pipefail # also exit if error in piped command -- must disable for acceptable errors
old_ifs="${IFS:-}"
IFS=$(printf ' \t\n' )
bindir=$(cd "$(dirname $0)" && pwd)
cmd_name=$(basename $0)

usage () {
    cat <<_USAGE
$cmd_name -- set up, switch sub-environments

Usage:
        $cmd_name -h   				# show extended help

        # For regular use:
        eval "\$($cmd_name init )"      		# set initial environment variables for localenv to function
        # later
        $cmd_name use <env name> <command ...>	# run an individual command in an environment
        $cmd_name use <env name>       	       	# start a sub-shell in the specified environment (normally what you want to do)
        eval "\$($cmd_name activate env_name)"	# enter an environment in *this* shell (for starting an environment on login)
        eval "\$($cmd_name deactivate)"	       	# exit environment in *this* shell
        # if you're curious
        $cmd_name env	                        # show current localenv environment variables
_USAGE
}

extended_usage() {
    cat <<_USAGE2
Subcommands:

    init [-s|-c]		# display environment variables for localenv initialization
        -s				# use shell syntax (default)
        -c				# use csh syntax

    off	 [-s|-c]		# display environment variables to remove any trace of localenv (does not reset to the state before)
        -s				# use shell syntax (default)
        -c				# use csh syntax
    list			# show available localenv-s (if currently in one, it's marked with a *)
    use	[-s|c] <env> [<cmd>]	# start a subshell or run a command in an environment
        -s				# don't start a subshell, just show shell environment variables
        -c				# don't start a subshell, just show csh environment variables
        <env>				# the name of the localenv to start (required, and must exist)
        <cmd>				# the command to run (if blank, will just start a subshell)
    activate [-s|-c] <env>		# display environment variable to activate an environment (eval to load in current shell)
        -s				# use shell syntax (default)
        -c				# use csh syntax
    deactivate [-s|-c]		# display environment variables to deactivate the current localenv (un-needed in subshells)
        -s				# use shell syntax (default)
        -c				# use csh syntax

Environment variables:
    Required:
        LOCALENV_ROOT		# full path to the base of the localenv set (default = $(dirname $bindir))
        ANACONDA_ROOT		# full path to conda installation (default = \$LOCALENV_ROOT/anaconda)
        PERLBREW_ROOT		# full path to perlbrew installation (default = \$LOCALENV_ROOT/perlbrew)
        PERLBREW_HOME		# set to \$PERLBREW_ROOT
    Set in an environment:
        LOCALENV_ACTIVE		# name of active environment
        LOCALENV_SUBSHELL	# the subshell depth, for localenv use
        CONDA_DEFAULT_ENV	# conda; set to \$LOCALENV_ACTIVE
        CONDA_PREFIX		# full path to active conda env
        PERLBREW_LIB		# perlbrew; set to \$LOCALENV_ACTIVE
        PERLBREW_PERL		# perlbrew; active version of perl
        PERL5LIB	       	# perl library search path
        PERL_LOCAL_LIB_ROOT	# perl Local::Lib path
        PERL_MM_OPT	       	# perl Module::Maker param to install libraries in env
        PERL_MB_OPT	       	# perl Module::Build param to install libraries in env
Modifying these variables may cause localenv to mis-behave.
_USAGE2
}

main() {
    action="${1:-ERROR}"
    shift

    case $action in
        "-h")
            usage
            extended_usage
            exit 0
        ;;
        ERROR)
            echo "ERROR: No action requested"
            usage >&2
            exit 1
        ;;
        init)
            initialize_localenv "$@"
        ;;
        off)
            disable_localenv "$@"
        ;;
        use)
            use_env "$@"
        ;;
        list)
            list_envs
        ;;
        activate)
            activate_env "$@"
        ;;
        deactivate)
            deactivate_env "$@"
        ;;
        env)
            show_shell_vars | sed -e 's/^export //'
        ;;
        *)
            echo "Command $action unimplemented" >&2
            usage >&2
            exit 1
        ;;
    esac

}


# ---------- Localenv sub-functions ---------------

localenv_vars="LOCALENV_ROOT LOCALENV_ACTIVE LOCALENV_ACTIVE_ROOT LOCALENV_SUBSHELL"
initialize_localenv () {
    local show_vars='sh'
    case "${1:-}" in
        "-q")
            show_vars='none'
            shift
        ;;
        "-s")
            show_vars='sh'
            shift
        ;;
        "-c")
            show_vars='csh'
            shift
        ;;
    esac

    if [ -z "${LOCALENV_ROOT:-}" ]; then
        if [ -n "${PERL5LIB:-}" ]; then
            echo "WARNING: PERL5LIB is set, which can cause problems with localenv. Removing...." >&2
            unset PERL5LIB
        fi
        if [ -n "${PERLBREW_ROOT:-}" ] || [ -n "${PERLBREW_HOME:-}" ]; then
            echo "WARNING: perlbrew is already active; This will deactivate your existing perlbrew(s)" >&2
            _purge_perlbrew

        fi
        if [ -n "${PYTHONPATH:-}" ]; then
            echo "WARNING: PYTHONPATH is set, which can cause problems with localenv. Removing...." >&2
            unset PYTHONPATH
        fi
        if [ -n "$(which conda 2>/dev/null)" ]; then
            echo "WARNING: conda is already active; This will deactivate your existing conda/python(s)" >&2
            _purge_conda
        fi
    else
        if [ "${PERLBREW_ROOT:-}" != "${PERLBREW_HOME:-}" ] || [ "${PERLBREW_ROOT:-}" != "${LOCALENV_ROOT:-}/perlbrew" ]; then
            echo "WARNING: perlbrew settings are not compatible with localenv" >&2
        fi
        # figure out a good way to check for anaconda incompatibility

        if [ -n "${LOCALENV_ACTIVE:-}" ]; then
            echo "WARNING: currently in an environment. This will reset it." >&2
            eval "$(_deactivate_env)"
            unset PERL5LIB
            unset PYTHONPATH
        fi
    fi

    # set default variable values
    : ${LOCALENV_ROOT:=$(dirname $bindir)}
    export LOCALENV_ROOT
    _initialize_conda
    _initialize_perlbrew
    pathprepend $LOCALENV_ROOT/bin
    if [ "$show_vars" = "csh" ]; then
        show_csh_vars all
    elif [ "$show_vars" = "none" ]; then
        :  # Don't show any vars
    else
        show_shell_vars all
    fi
}

disable_localenv () {
    local show_vars='s'
    case "${1:-}" in
        "-s")
            show_vars='sh'
            shift
        ;;
        "-c")
            show_vars='csh'
            shift
        ;;
    esac
    if [ -n "$LOCALENV_ACTIVE" ]; then
        _deactivate_env
    fi
    _purge_localenv
    if [ "$show_vars" = "csh" ]; then
        show_csh_vars all
    else
        show_shell_vars all
    fi
}

activate_env () {
    local mode="-s"
    case "${1:-}" in
        "-s")
            mode="-s"
            shift
        ;;
        "-c")
            mode="-c"
            shift
        ;;
    esac
    use_env "$mode" "$@"

}
use_env () {
    local show_vars=''
    case "${1:-}" in
        "-s")
            show_vars='sh'
            shift
        ;;
        "-c")
            show_vars='csh'
            shift
        ;;
    esac

    if [ -z "${LOCALENV_ROOT:-}" ]; then
        echo "Localenv not initialized. Initializing..." >&2
        initialize_localenv -q
    fi
    if [ -n "${LOCALENV_ACTIVE:-}" ]; then
        _deactivate_env
    fi

    export LOCALENV_ACTIVE=${1:-}
    if [ -z "$LOCALENV_ACTIVE" ]; then
        echo "ERROR: must specify environment to use" >&2
        usage >&2
        exit 1
    fi
    local localenv_path="$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE"
    if ! [ -d "$localenv_path" -o -L "$localenv_path" ]; then
        echo "ERROR: $LOCALENV_ACTIVE is not a known environment" >&2
        usage >&2
        exit 1
    fi
    shift

    _activate_conda $LOCALENV_ACTIVE
    _activate_perlbrew $LOCALENV_ACTIVE
    export LOCALENV_ACTIVE_ROOT="$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE"
    add_local_prefix "$LOCALENV_ACTIVE_ROOT"
    local activate_script="$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE/.localenv_activate.sh"
    local show_cmd='show_shell_vars'
    if [ -f "$activate_script" ]; then
        . "$activate_script"
    fi

    if [ "$show_vars" = "csh" ]; then
        show_cmd="show_csh_vars"
        activate_script=${activate_script%.sh}.csh
    fi

    if [ -n "$show_vars" ]; then
        "$show_cmd" all
        if [ -f "$activate_script" ]; then
            sed -e 's/\([^\\;]\)$/\1;/' "$activate_script"
        fi
    else
        set +u
        set +e
        set +o pipefail
        export IFS="$old_ifs"
        : ${LOCALENV_SUBSHELL:=0}
        : $((LOCALENV_SUBSHELL=LOCALENV_SUBSHELL+1))
        export LOCALENV_SUBSHELL
        if [ -n "$*" ]; then
            exec "$@"
        else
            local shid="$(basename "$SHELL")"
            local no_profile=''
            case $shid in
                bash) no_profile='--noprofile' ;;
                tcsh) no_profile='-f' ;;
                csh)  no_profile='-f' ;;
            esac
            exec "$SHELL" "$no_profile"
        fi
    fi
}

deactivate_env () {
    local show_vars='sh'
    case "${1:-}" in
        "-s")
            show_vars='sh'
            shift
        ;;
        "-c")
            show_vars='csh'
            shift
        ;;
    esac
    if [ -z ${LOCALENV_ACTIVE:-} ]; then
        echo "ERROR: Not in a local environment. Nothing to do." >&2
        exit 1
    elif [ -n "${LOCALENV_SUBSHELL:-}" ]; then
        echo 'In an active subshell. Just type "exit" to exit the environment.' >&2
        exit 0
    else
        local deactivate_script="$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE/.localenv_deactivate.sh"
        local show_cmd=show_shell_vars
        if [ -f "$deactivate_script" ]; then
            . "$deactivate_script"
        fi
        if [ "$show_vars" = 'csh' ]; then
            deactivate_script=${deactivate_script%.sh}.csh
            show_cmd=show_csh_vars
        fi
        _deactivate_env
        if [ -f "$deactivate_script" ]; then
                sed -e 's/\([^\\;]\)$/\1;/' "$deactivate_script"
        fi
        $show_cmd all
    fi
}

list_envs () {
    if [ -n "${LOCALENV_ACTIVE:-}" ]; then
        \ls -1 "$LOCALENV_ROOT/envs" | awk '{if ($1 == "'"$LOCALENV_ACTIVE"'") { print "* "$0} else {print "  "$0} }'
    else
        \ls -1 "$LOCALENV_ROOT/envs" | sed -e 's/^/  /'
    fi
}

_deactivate_env () {
    _deactivate_conda
    _deactivate_perlbrew
    if [ -n "$LOCALENV_ACTIVE" ]; then
        remove_local_prefix "$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE"
        if [ -f "$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE/.localenv_deactivate" ]; then
            . "$LOCALENV_ROOT/envs/$LOCALENV_ACTIVE/.localenv_deactivate"
        fi

        unset LOCALENV_ACTIVE LOCALENV_ACTIVE_ROOT
    fi
}

_purge_localenv() {
    _purge_conda
    _purge_perlbrew
    pathremove "$LOCALENV_ROOT/bin"
    local var
    for var in $localenv_vars; do
        unset $var
    done
}


# ---- conda-related functions
conda_vars="ANACONDA_ROOT CONDA_PREFIX CONDA_DEFAULT_ENV CONDA_PATH_BACKUP CONDA_PS1_BACKUP PYTHONPATH"

_initialize_conda () {
    export ANACONDA_ROOT="$LOCALENV_ROOT/anaconda"
    pathprepend $ANACONDA_ROOT/bin
}
_purge_conda () {
    if [ -n "${ANACONDA_ROOT:-}" ]; then 
        pathremove "$ANACONDA_ROOT/bin"
    else
        ( local IFS=':'
        for d in $PATH; do
            if [ -e "$d/conda" ]; then
                pathremove "$d"
            fi
        done
        )
    fi
    local var
    for var in $conda_vars; do
        unset $var
    done
}

_deactivate_conda () {
    if [ -n "${CONDA_DEFAULT_ENV:-}" ]; then
        pathremove $CONDA_PREFIX/bin
        unset CONDA_PREFIX
        unset CONDA_DEFAULT_ENV
    fi
}

_activate_conda () {
    export CONDA_DEFAULT_ENV="$1"
    export CONDA_PREFIX="$ANACONDA_ROOT/envs/$CONDA_DEFAULT_ENV"
    if [ ! -d "$CONDA_PREFIX" ]; then
        echo "ERROR: Anaconda environment incorrectly set up: $CONDA_DEFAULT_ENV does not exist" >&2
        echo "Contact the administrator to fix this" >&2
        exit 255
    fi
    pathprepend "$CONDA_PREFIX/bin"
}


# ---- perlbrew-related functions

perlbrew_vars="PERLBREW_ROOT PERLBREW_HOME PERLBREW_PERL PERLBREW_LIB PERL5LIB PERL_LOCAL_LIB_ROOT PERL_MM_OPT PERL_MB_OPT"

_initialize_perlbrew () {
    export PERLBREW_ROOT="$LOCALENV_ROOT/perlbrew"
    export PERLBREW_HOME="$PERLBREW_ROOT"
    pathprepend $PERLBREW_ROOT/bin
    export PERLBREW_PERL=$($PERLBREW_ROOT/bin/perlbrew list | sed 's/^[ \*]*//; s/  *.*//' | sort -r | fgrep -m 1 -v '@')
    pathprepend "$PERLBREW_ROOT/perls/$PERLBREW_PERL/bin"
    pathprepend "$PERLBREW_ROOT/perls/$PERLBREW_PERL/man" MANPATH
}

_purge_perlbrew () {
    if [ -n "${PERLBREW_PERL:-}" ]; then
        pathremove "$PERLBREW_ROOT/perls/$PERLBREW_PERL/bin"
        pathremove "$PERLBREW_ROOT/perls/$PERLBREW_PERL/man" MANPATH
    fi
    if [ -n "${PERLBREW_ROOT:-}" ]; then
        pathremove "$PERLBREW_ROOT/bin"
    fi
    local var
    for var in $perlbrew_vars; do
        unset $var
    done
}

_deactivate_perlbrew () {
    if [ -n "${PERLBREW_LIB:-}" ]; then
        local perlbrew_libdir="$PERLBREW_HOME/libs/$PERLBREW_PERL@$PERLBREW_LIB"
        pathremove "${perlbrew_libdir}/bin"
        pathremove "${perlbrew_libdir}/man" MANPATH
        pathremove "${perlbrew_libdir}/lib/perl" PERL5LIB
        unset PERLBREW_LIB
        pathremove "$PERLBREW_ROOT/perls/$PERLBREW_PERL/bin"
        unset PERLBREW_PERL
        unset PERL_LOCAL_LIB_ROOT
        unset PERL_MM_OPT
        unset PERL_MB_OPT
        unset PERL5LIB
    fi
}

_activate_perlbrew () {
    export PERLBREW_LIB="$1"
    local perlbrew_verlib=$($PERLBREW_ROOT/bin/perlbrew list | fgrep -m 1 "@$PERLBREW_LIB" | sed 's/^[ \*]*//; s/  *.$//')
    if [ -z "$perlbrew_verlib" -o ! -d "$PERLBREW_HOME/libs/$perlbrew_verlib" ]; then
        echo "ERROR: Perlbrew environment incorrectly set up: $PERLBREW_LIB does not exist" >&2
        echo "Contact the administrator to fix this" >&2
        exit 255
    fi
    if [ -n "${PERLBREW_PERL:-}" ]; then
        pathremove "$PERLBREW_ROOT/perls/$PERLBREW_PERL/bin"
        pathremove "$PERLBREW_ROOT/perls/$PERLBREW_PERL/man" MANPATH
        unset PERL5LIB
    fi
    export PERLBREW_PERL=${perlbrew_verlib%@*}  # strip the @libname
    pathprepend "$PERLBREW_ROOT/perls/$PERLBREW_PERL/bin"
    local perlbrew_libdir="$PERLBREW_HOME/libs/$perlbrew_verlib"
    pathprepend "$perlbrew_libdir/bin"
    pathprepend "$perlbrew_libdir/man" MANPATH
    pathprepend "$perlbrew_libdir/lib/perl5" PERL5LIB
    export PERL_LOCAL_LIB_ROOT=$perlbrew_libdir
    export PERL_MM_OPT="INSTALL_BASE=$perlbrew_libdir"
    export PERL_MB_OPT="--install_base $perlbrew_libdir"
}


# -- localenv helpers

_var_value () {
    local var=$1
    eval "local val=\${$var:-}"
    echo "$val"
}

show_shell_vars () {
    local show_all=''
    if [ -n "${1:-}" ]; then
        show_all="y"
    fi
    local var
    local all_vars="PATH MANPATH INFOPATH CPATH INCLUDE_PATH LIBRARY_PATH LD_LIBRARY_PATH PKG_CONFIG_PATH $conda_vars $perlbrew_vars $localenv_vars"
    for var in $all_vars; do
        local val=`_var_value $var`
        if [ -n "${val:-}" ]; then
            echo "export $var=\"$val\";"
        elif [ -n "${show_all:-}" ]; then
            if [ "$var" != "LD_LIBRARY_PATH" ] || [ "${DISTRO:-}" != "MacOSX" ]; then  # OSX w/ SIP does not export LD_LIBRARY_PATH or DYLD_LIBRARY_PATH
                echo "unset $var;"
            fi
        fi
    done

}

show_csh_vars () {
    local show_all=''
    if [ -n "${1:-}" ]; then
        show_all="y"
    fi
    local var
    local all_vars="PATH MANPATH INFOPATH CPATH INCLUDE_PATH LIBRARY_PATH LD_LIBRARY_PATH PKG_CONFIG_PATH $conda_vars $perlbrew_vars $localenv_vars"
    for var in $all_vars; do
        local val=`_var_value $var`
        if [ -n "${val:-}" ]; then
            echo "setenv $var \"$val\";"
        elif [ -n "${show_all:-}" ]; then
            if [ "$var" != "LD_LIBRARY_PATH" ] || [ "${DISTRO:-}" != "MacOSX" ]; then  # OSX w/ SIP does not export LD_LIBRARY_PATH or DYLD_LIBRARY_PATH
                echo "unsetenv $var;"
            fi
        fi
    done
    echo "set path=($(echo "$PATH" | sed -e 's/:/ /g'));"
}


# -- path modification functions --

# pathremove: remove from path
# Usage: pathremove <directory> [<PATH variable>]
pathremove () {
    local IFS=':'
    local NEWPATH=''
    local DIR
    local PATHVARIABLE=${2:-PATH}
    eval "local PATHVALUE=\"\${$PATHVARIABLE:-}\""
    if [ -n "${PATHVALUE}" ]; then
        for DIR in ${PATHVALUE} ; do
            local no_add=''
            for TO_REMOVE in $1; do
                if [ "$DIR" = "$TO_REMOVE" ] ; then
                    no_add=1
                fi
            done
            if [ -z "$no_add" ]; then
                NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
            fi
        done
        # shellcheck disable=SC1066
        export $PATHVARIABLE="$NEWPATH"
    fi
}

# pathprepend: add to start of path
# Usage: pathprepend <directory> [<PATH variable>]
pathprepend () {
    local PATHVARIABLE=${2:-PATH}
    pathremove "$1" "$PATHVARIABLE"
    eval "local PATHVALUE=\${$PATHVARIABLE:-}"
    # shellcheck disable=SC1066
    export $PATHVARIABLE="$1${PATHVALUE:+:${PATHVALUE}}"
}


# add_local_prefix: add all directories under $1 to appropriate environment vars
# Usage: add_local_prefix <root_path>
add_local_prefix () {
    action=${2:-prepend}
    if [ -n "$1" ]; then
        prefix=${1%/}
        if [ -d "$prefix/sbin" ]; then
            "path$action" "$prefix/sbin" PATH
        fi
        if [ -d "$prefix/bin" ]; then
            "path$action" "$prefix/bin" PATH
        fi
        if [ -d "$prefix/lib" ]; then
            "path$action" "$prefix/lib" LD_LIBRARY_PATH
            "path$action" "$prefix/lib" LIBRARY_PATH
            # "path$action" "$prefix/lib" DYLD_LIBRARY_PATH
        fi
        if [ -d "$prefix/lib64" ]; then
            "path$action" "$prefix/lib64" LD_LIBRARY_PATH
            "path$action" "$prefix/lib64" LIBRARY_PATH
            # "path$action" "$prefix/lib64" DYLD_LIBRARY_PATH
        fi
        if [ -d "$prefix/include" ]; then
            "path$action" "$prefix/include" INCLUDE_PATH
            "path$action" "$prefix/include" CPATH
        fi
        if [ -d "$prefix/man" ]; then
            "path$action" "$prefix/man" MANPATH
        fi
        if [ -d "$prefix/share/man" ]; then
            "path$action" "$prefix/share/man" MANPATH
        fi
        if [ -d "$prefix/info" ]; then
            "path$action" "$prefix/info" INFOPATH
        fi
        if [ -d "$prefix/share/info" ]; then
            "path$action" "$prefix/share/info" INFOPATH
        fi
        if [ -d "$prefix/lib/pkgconfig" ]; then
            "path$action" "$prefix/lib/pkgconfig" PKG_CONFIG_PATH
        fi
        if [ -d "$prefix/share/pkgconfig" ]; then
            "path$action" "$prefix/share/pkgconfig" PKG_CONFIG_PATH
        fi
    fi
}


# remove_local_prefix: remove directories under a root from all environment paths
# Usage: remove_local_prefix <root_path>
remove_local_prefix () {
    if [ -n "$1" ]; then
        prefix=${1%/}
        pathremove "$prefix/sbin" PATH
        pathremove "$prefix/bin" PATH
        pathremove "$prefix/lib" LD_LIBRARY_PATH
        pathremove "$prefix/lib" LIBRARY_PATH
        pathremove "$prefix/lib64" LD_LIBRARY_PATH
        pathremove "$prefix/lib64" DYLD_LIBRARY_PATH
        pathremove "$prefix/lib64" LIBRARY_PATH
        pathremove "$prefix/include" INCLUDE_PATH
        pathremove "$prefix/include" CPATH
        pathremove "$prefix/man" MANPATH
        pathremove "$prefix/share/man" MANPATH
        pathremove "$prefix/info" INFOPATH
        pathremove "$prefix/share/info" INFOPATH
        pathremove "$prefix/lib/pkgconfig" PKG_CONFIG_PATH
        pathremove "$prefix/share/pkgconfig" PKG_CONFIG_PATH
    fi
}
#for _f in pathremove pathprepend add_local_prefix remove_local_prefix; do
#    declare -f $_f
#    echo ";"
#done


# ------------------------ start program

onexit () {
    : # necessary cleanup steps
}
trap onexit EXIT

traperror () {
    local err=$1 # error status
    local line=$2 # LINENO
    local linecallfunc=$3
    local command="$4"
    local funcstack="$5"
    echo "<---"
    echo "ERROR: line $line - command '$command' exited with status: $err"
    if [ "$funcstack" != "::" ]; then
        echo -n "   ... Error at ${funcstack} "
        if [ "$linecallfunc" != "" ]; then
            echo -n "called at line $linecallfunc"
        fi
        else
            echo -n "   ... internal debug info from function ${FUNCNAME} (line $linecallfunc)"
    fi
    echo
    echo "--->"
}
# uncomment for error debugging
# trap 'traperror $? $LINENO $BASH_LINENO "$BASH_COMMAND" $(printf "::%s" ${FUNCNAME[@]})'  ERR


main "$@"

